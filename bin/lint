#!/bin/bash

has_error=0
wd=$(pwd)
gitd=$(git rev-parse --show-toplevel)

# get all go files but exclude protobuf generated files 
files=()
allfiles=$(find $gitd -type f -name '*.go' ! -path '*test*')
for file in $allfiles; do
	grep '^// Code generated .* DO NOT EDIT\.$' $file>/dev/null 2>&1
	if [ $? -ne 0 ]; then
		files+=($file)
	fi
done

[ -z "$files" ] && exit 0

gofiles="${files[@]}"

[ -z "$gofiles" ] && exit 0

gofmt -s -w $gitd 

which addlicense>/dev/null 2>&1
if [ $? -ne 0 ]; then
	go get -u github.com/google/addlicense
fi

if [ ! -f "$gitd/LICENSE" ]; then
	echo "Missing LICENSE file"
	has_error=1
fi

# check to see if the LICENSE environment variable is set
if [ -z "$LICENSE_HEADER" ]
then
	echo "LICENSE_HEADER variable not found using parent directory" 
	
	# LICENSE environment variable is not set so attempt
	# to check the parent directory of the dit repo for
	# a LICENSE file to pull from
	LICENSE_HEADER=$gitd/../LICENSE_HEADER.txt
fi

# if the license file exists at the LICENSE environment variable path
# then iterate over the .go files and add the license if it doesn't 
# already exist
if [ -f "$LICENSE_HEADER" ]; then
	for file in $gofiles; do
		addlicense -f $LICENSE_HEADER $file
	done	
else
	echo "LICENSE_HEADER not found at $LICENSE_HEADER"
fi

# Move to repo root directory
cd $gitd

#-----------------------------------
# Execute the linters 
#-----------------------------------

# Determine if golangci-lint is installed and execute
# it against the directory
which golangci-lint>/dev/null 2>&1
if [ $? == 0 ]; then
	golangci-lint run
	if [ $? -ne 0 ]; then
        has_error=1
    fi
fi

#-----------------------------------
# Evaluate the go.mod file 
#-----------------------------------
cd $gitd
find . -type f -name go.mod | while read fname; do 
	DIR=$(dirname $fname)
	cd $DIR
	
	go mod tidy
	git add go.mod

	# check for the existence of a go.sum file
	if [ -f "go.sum" ]; then
		git add go.sum
	fi

	# Determine if there is a replace directive in the go.mod file
	rep=$(grep -n replace go.mod)
	if [ $? -ne 1 ]; then
		echo "remove replace directive from $fname"
		echo " " $rep
		has_error=1
	fi

	cd $gitd
done
cd $wd

#-----------------------------------
# Execute the unit tests 
#-----------------------------------
go test -race -cover $gitd/...
if [ $? -ne 0 ]; then
    echo "testing error"
    has_error=1
fi

if [ ${has_error} -ne 0 ]; then
    echo "One or more linter errors. Fix them and try again."
    exit 1
fi
